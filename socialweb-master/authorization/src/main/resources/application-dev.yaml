server:
  port: 8084
  servlet:
    context-path: /api/v1/auth
  error:
    include-message: always
  remote:
    address: 5.63.154.191

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://5.63.154.191:8087/eureka
  instance:
    hostname: 5.63.154.191


jwt:
  access-token-duration: 300_000
  refresh-token-duration: 3_600_000

spring:
  application:
    name: auth-micro-service-dev
  config:
    import: optional:secrets.properties
  datasource:
    url: jdbc:h2:mem:mydb;IGNORECASE=TRUE;NON_KEYWORDS=USER;MODE=PostgreSQL;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE;DB_CLOSE_DELAY=-1;
#    url: jdbc:h2:file:./DB/data39;DB_CLOSE_ON_EXIT=TRUE;AUTO_RECONNECT=TRUE;DB_CLOSE_DELAY=-1;IGNORECASE=TRUE;NON_KEYWORDS=USER;MODE=PostgreSQL;
    username: admin
    password: password
    driverClassName: org.h2.Driver
  sql:
    init:
      mode: never
      platform: h2
  output:
    ansi:
      enabled: always
  main:
    allow-circular-references: true
    allow-bean-definition-overriding: true
#  jpa:
#    database-platform: org.hibernate.dialect.H2Dialect
#    defer-datasource-initialization: false
#    show-sql: true
#    hibernate:
#      ddl-auto: none
#  h2:
#    console:
#      path: /h2-console/
#      enabled: true
#      settings:
#        web-allow-others: false

security:
  basic:
    enabled: true
    authorize-mode: NONE
  oauth2:
    resource:
      filter-order: 3

gtw:
  users-service: http://${server.remote.address}:8088/users

cloud:
  openfeign:
    client:
      config:
        default:
          connectTimeout: 5000
          readTimeout: 5000
          loggerLevel: DEBUG
        users-service:
          url: http://${server.remote.address}:8085/api/v1

users-service:
  url: http://${server.remote.address}:8085/api/v1

resilience4j:
  retry:
    instances:
      user-service-retry:
        max-attempts: 4
        wait-duration: 3s
        retry-exceptions:
          - feign.FeignException.BadGateway
          - feign.FeignException.BadRequest
          - feign.FeignException.NotFound

  circuitbreaker:
    instances:
      user-service-breaker:
        sliding-window-type: count-based
        sliding-windows-size: 5
        failure-rate-threshold: 75
        wait-duration-in-open-state: 10s
        max-wait-duration-in-half-open-state: 5s
        automatic-transition-from-open-to-half-open-state: true
        permitted-number-of-calls-in-half-open-state: 2

logging:
  level:
    spring:
      cloud:
        openfeign: DEBUG
        starter:
          openfeign: DEBUG
    org:
      apache:
        http:
          wire: INFO
      springframework:
        cloud: DEBUG
        security: DEBUG
    com:
      netflix:
        eureka: INFO
        discovery: INFO

kafka:
  consumer-enabled: true
  bootstrap-servers: localhost:9092,localhost:9093
  properties:
    #      sasl:
    #        jaas:
    #          config: org.apache.kafka.common.security.plain.PlainLoginModule required username=${kafka_username:'admin'} password=${kafka_password:'admin-secret'};
    #        mechanism: PLAIN
    security:
      #        protocol: SASL_PLAINTEXT
      protocol: PLAINTEXT
      # Тип, для которого определяем конкретные сериализаторы
      spring.json.value.default.type: com.skillbox.socialnetwork.dto.kafka.JsonMessage.java
      spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
      spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
  consumer:
    auto-offset-reset: earliest
    group-id: ${spring.application.name}
    # Сериализаторы для всех типов
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    value-deserializer: org.apache.kafka.common.serialization.JsonDeserializer
    max-poll-records: 1
    fetch-max-wait: 36000
    enable-auto-commit: false

  producer:
    client-id: ${spring.application.name}
    key-serializer: org.apache.kafka.common.serialization.StringSerializer
    # Очередь для исключений
    value-serializer: org.apache.kafka.common.serialization.JsonDeserializer
    retries: 2

  #    jaas:
  #      enabled: true
  listener:
    poll-timeout: 1800000
    concurrency: 1
    # ack-mode: manual_immediate
    # Получение каждой записи должно быть подтверждено
    ack-mode: record
  topics:
    auth: auth-topic
    users: users-topic
    posts: posts-topic
    msg: msg-topic
    notify: notify-topic
    friends: friends-topic
    admin: admin-topic
